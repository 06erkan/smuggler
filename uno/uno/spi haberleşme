SPI (Serial Peripheral Interface) Ã¼zerinden veri okumak ve gÃ¶ndermek iÃ§in, Arduino'da birkaÃ§ adÄ±m izleyebilirsin. Ä°ÅŸlem temelde, bir Master ve Slave cihazÄ± arasÄ±nda veri iletimi saÄŸlar. Arduino Nano ve Mega, SPI iletiÅŸimini destekler.

AÅŸaÄŸÄ±da, SPI Ã¼zerinden veri gÃ¶nderme ve alma iÃ§in temel bir Ã¶rnek bulacaksÄ±n:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. SPI BaÄŸlantÄ±larÄ±nÄ± Yapma:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MOSI (Master Out Slave In): Veri gÃ¶nderme pinidir.
MISO (Master In Slave Out): Veri okuma pinidir.
SCK (Clock): Saat sinyali pinidir.
SS (Slave Select): Slave cihazÄ± seÃ§mek iÃ§in kullanÄ±lÄ±r.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Master (Veri GÃ¶nderen Arduino) Kod Ã–rneÄŸi:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define MPU_CS 53   // MPU-9250 Chip Select pini
#define SLAVE_SS 8  // Slave iÃ§in SS pini
#define SCK_PIN 52  // SPI SCK pini
#define MOSI_PIN 51 // SPI MOSI pini
#define MISO_PIN 50 // SPI MISO pini

// MPU-9250 Register Adresleri
#define MPU_ACCEL_XOUT_H 0x3B  

void setup() {
    Serial.begin(115200);
    
    pinMode(MPU_CS, OUTPUT);
    pinMode(SLAVE_SS, OUTPUT);
    pinMode(SCK_PIN, OUTPUT);
    pinMode(MOSI_PIN, OUTPUT);
    pinMode(MISO_PIN, INPUT);

    digitalWrite(MPU_CS, HIGH);
    digitalWrite(SLAVE_SS, HIGH);
    digitalWrite(SCK_PIN, LOW);

    Serial.println("MPU-9250 ve SPI BaÅŸlatÄ±ldÄ±!");
}

void loop() {
    int16_t ax, ay, az;

    // MPU-9250â€™den ivme verisini oku
    readMPU9250Accel(ax, ay, az);

    Serial.print("Ä°vme X: "); Serial.print(ax);
    Serial.print(" Y: "); Serial.print(ay);
    Serial.print(" Z: "); Serial.println(az);

    // Slaveâ€™a veri gÃ¶nder
    digitalWrite(SLAVE_SS, LOW);

    shiftOutManual(MOSI_PIN, SCK_PIN, highByte(ax));
    shiftOutManual(MOSI_PIN, SCK_PIN, lowByte(ax));

    shiftOutManual(MOSI_PIN, SCK_PIN, highByte(ay));
    shiftOutManual(MOSI_PIN, SCK_PIN, lowByte(ay));

    shiftOutManual(MOSI_PIN, SCK_PIN, highByte(az));
    shiftOutManual(MOSI_PIN, SCK_PIN, lowByte(az));

    digitalWrite(SLAVE_SS, HIGH);

    delay(500);
}

// ðŸŸ¢ MPU-9250'den SPI ile veri okuma (Manuel SPI)
void readMPU9250Accel(int16_t &ax, int16_t &ay, int16_t &az) {
    digitalWrite(MPU_CS, LOW);  // MPU'yu seÃ§

    sendSPIByte(MPU_ACCEL_XOUT_H | 0x80); // Okuma komutu gÃ¶nder

    uint8_t accelX_H = receiveSPIByte();
    uint8_t accelX_L = receiveSPIByte();
    uint8_t accelY_H = receiveSPIByte();
    uint8_t accelY_L = receiveSPIByte();
    uint8_t accelZ_H = receiveSPIByte();
    uint8_t accelZ_L = receiveSPIByte();

    digitalWrite(MPU_CS, HIGH);  // MPU'yu bÄ±rak

    ax = (accelX_H << 8) | accelX_L;
    ay = (accelY_H << 8) | accelY_L;
    az = (accelZ_H << 8) | accelZ_L;
}

// ðŸŸ¢ SPI ile 8 bit veri gÃ¶nderme (Manuel SPI)
void sendSPIByte(uint8_t data) {
    for (int8_t i = 7; i >= 0; i--) {
        digitalWrite(MOSI_PIN, (data >> i) & 0x01); // MOSI'ye bit yaz
        digitalWrite(SCK_PIN, HIGH);  // Saat sinyalini yÃ¼kselt
        delayMicroseconds(1);
        digitalWrite(SCK_PIN, LOW);   // Saat sinyalini dÃ¼ÅŸÃ¼r
    }
}

// ðŸ”µ SPI ile 8 bit veri alma (Manuel SPI)
uint8_t receiveSPIByte() {
    uint8_t value = 0;
    for (int8_t i = 7; i >= 0; i--) {
        digitalWrite(SCK_PIN, HIGH);  // Saat sinyalini yÃ¼kselt
        delayMicroseconds(1);
        value |= (digitalRead(MISO_PIN) << i); // MOSI'den gelen bit'i oku
        digitalWrite(SCK_PIN, LOW);   // Saat sinyalini dÃ¼ÅŸÃ¼r
    }
    return value;
}

// ðŸ”´ SPI ile Slave cihaza 8 bit veri gÃ¶nderme (Manuel SPI)
void shiftOutManual(uint8_t dataPin, uint8_t clockPin, uint8_t val) {
    for (int8_t i = 7; i >= 0; i--) {
        digitalWrite(dataPin, (val >> i) & 0x01); // MOSI'ye veri yaz
        digitalWrite(clockPin, HIGH);  // Saat sinyalini yÃ¼kselt
        delayMicroseconds(1);
        digitalWrite(clockPin, LOW);   // Saat sinyalini dÃ¼ÅŸÃ¼r
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Slave (Veri Okuyan Arduino) Kod Ã–rneÄŸi:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SLAVE_SS 8  // Slave SS pini
#define SCK_PIN 5   // SPI SCK pini
#define MOSI_PIN 6  // SPI MOSI pini
#define MISO_PIN 7  // SPI MISO pini (bu kodda kullanÄ±lmÄ±yor Ã§Ã¼nkÃ¼ veri sadece alÄ±nÄ±yor)

volatile int16_t ax, ay, az;

void setup() {
    Serial.begin(115200);
    pinMode(SCK_PIN, INPUT);   // Saat sinyali (Master tarafÄ±ndan kontrol edilir)
    pinMode(MOSI_PIN, INPUT);  // Veri giriÅŸi (Master'dan veri almak iÃ§in)
    pinMode(MISO_PIN, OUTPUT); // (EÄŸer Masterâ€™a veri gÃ¶ndereceksen kullanÄ±labilir)
    pinMode(SLAVE_SS, INPUT);  // Slave Select pini (Master dÃ¼ÅŸÃ¼k yaparsa veri alÄ±rÄ±z)
    digitalWrite(MISO_PIN, LOW); // BaÅŸlangÄ±Ã§ta LOW

    Serial.println("SPI Slave BaÅŸlatÄ±ldÄ±!");
}

void loop() {
    if (digitalRead(SLAVE_SS) == LOW) {  // SS dÃ¼ÅŸÃ¼kse veri geliyordur
        ax = (readSPI() << 8) | readSPI(); // X ekseni verisi (16 bit)
        ay = (readSPI() << 8) | readSPI(); // Y ekseni verisi (16 bit)
        az = (readSPI() << 8) | readSPI(); // Z ekseni verisi (16 bit)

        Serial.print("X: "); Serial.print(ax);
        Serial.print(" Y: "); Serial.print(ay);
        Serial.print(" Z: "); Serial.println(az);
    }
}

// SPI Ã¼zerinden 8 bit veri okuma fonksiyonu (KÃ¼tÃ¼phane kullanÄ±lmadan)
uint8_t readSPI() {
    uint8_t value = 0;
    for (int i = 0; i < 8; i++) {  // 8 bit oku
        while (digitalRead(SCK_PIN) == LOW);  // Saat sinyalinin HIGH olmasÄ±nÄ± bekle
        value = (value << 1) | digitalRead(MOSI_PIN); // MOSI'den gelen bit'i oku
        while (digitalRead(SCK_PIN) == HIGH); // Saat sinyalinin LOW olmasÄ±nÄ± bekle
    }
    return value;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AÃ§Ä±klamalar:
Master tarafÄ±nda: SPI.transfer() fonksiyonu hem veri gÃ¶ndermek hem de almak iÃ§in kullanÄ±lÄ±r. GÃ¶nderdiÄŸiniz veriyi de dÃ¶ndÃ¼rÃ¼r.
Slave tarafÄ±nda: SPI iletiÅŸimi her an veri almaya aÃ§Ä±ktÄ±r ve bu iÅŸlem, SPI.transfer() ile yapÄ±lÄ±r. Slave cihazda, verinin alÄ±nmasÄ± iÃ§in SPI.available() kontrol edilir.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ekstra Notlar:
BaÄŸlantÄ±lar: Arduino Mega ve Nano'nun SPI pinleri genellikle ÅŸu ÅŸekildedir:
MOSI (Master Out Slave In): Pin 11 (Mega: 51)
MISO (Master In Slave Out): Pin 12 (Mega: 50)
SCK (Clock): Pin 13 (Mega: 52)
SS (Slave Select): Pin 10 (Mega: 53)
